Overview:

The dockerfile instructions include pulling the official image of the headless R application from Docker Hub.  
A directory is created in the container named, /app, which will store the .csv data created by the R script file.
The official R image will initialize a docker container that starts the R interpreter (R runtime environment).  The R interpreter executes the R script file (tester.R), which writes a .csv file to the container folder / app.



Overall objective: 

While the Container is running, use the docker cp command.  The docker cp command will be used 
to copy the csv file that the R interpreter created from the docker container to the Windows 
file system - copying into this working folder. 


Synopsis: dockerfile 

Pulls the headless R-base programming application image from Docker Hub
Creates a directory named /app within the docker container.
Copies the script R file from the PC working folder into the container's new directory named, app
Runs the R script file w/in the docker Container and writes data to disk.


The simple R script file creates some random data, stores the data to a data frame, and then writes the 
data frame to the disk using the basic R command, write.csv ( ). 


Specific Objective:

Explore using the docker cp command to retrieve persistant data (the .csv file) from a docker container -
the .csv file that is created when the container runs the R script file.

Code structure:
{ docker cp your_container:/app/yourfile.csv /path/on/host/destination/yourfile.csv } 

Actual: 
docker cp modest_gould:/app/testFile.csv C:/Gcode/docker_co_cmd/testFile.csv

This works. Note: attempting to change the name of the existing copied file to a new name will result in an error.


Interim Note:

The docker cp command was run and the .csv file was successfully copied from the stopped docker container into the host 
working folder.  The container does NOT continue running after the executing the R script file.

Note: This container starts, executes the code, then stops.  

	In one test: the set.seed() was commented-out in R script file and the container started again.  The same 
	series of random numbers was created by the R container.  
	t/f: The container will not update or change once created with the set.seed fct.

In another test, the stopped container was deleted. The testFiles.csv was deleted.  A new container was created 
from the same R image. The same random numbers were produced from this new container - even though the set.seed() 
was removed. 
t/f: a new container created from an existing image will output the data based on the original dockerfile ... regardless


Next, the name of the original dockerfile was changed.  This was done to test whether changing the name of the 
dockerfile would effect the existing docker image of the headless R app.  Changing the name had no impact.  
Changing the name did not influene the existing R image because the existing image was built from the instructions 
from the original dockerfile.  

The new docker image creates the identical instance of itself (containers) based on the original dockerfile regardless 
of changes to the dockerfile after the image is built.  Similarly, changes to the R script file have no effect on 
the image / container. 

Next, a new image was created using the R script file having no set.seed() fct.  
The containers created different data each time the container was restarted after it stopped.





